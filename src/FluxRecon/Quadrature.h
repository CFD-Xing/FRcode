///////////////////////////////////////////////////////////////////////////////
/// \file Quadrature.h
///
/// \author Jacques Y. Xing
///
///   The main changes are the addition of:
///
/// \date November 20 2021
///
///////////////////////////////////////////////////////////////////////////////
#ifndef QUADRATURE_H
#define QUADRATURE_H


///////////////////////////////////////////////////////////////////////////////
// INCLUDES
///////////////////////////////////////////////////////////////////////////////
// Include required C++ libraries
#include <stdexcept>
using namespace std;


///////////////////////////////////////////////////////////////////////////////
// GAUSS QUADRATURE
///////////////////////////////////////////////////////////////////////////////
void GaussPoint(const int& K, double* x, double* w);
void GaussRadauPoint(const int& K, double* x, double* w);
void GaussLobattoPoint(const int& K, double* x, double* w);
void GaussChebyshevPoint(const int& K, double* x, double* w);
void GaussHermittePoint(const int& K, double* x, double* w);
void GaussLaguerrePoint(const int& K, double* x, double* w);


// **************************************************************************//
// GaussPoint
// **************************************************************************//
inline void GaussPoint(const int& K, double* x, double* w){

  // DESCRIPTION
  // ----------------------
  // Return the Gauss-Legendre quadrature abscissa, x, and weights, w.


  // INPUTS
  // ----------------------
  // K       - Number of quadrature points


  // OUTPUTS
  // ----------------------
  // x       - Gauss-Legendre abscissa
  // w       - Gauss-Legendre weights

  
  // GAUSS-LEGENDRE POINTS
  // ----------------------
  switch (K){
    case 1:{
      x[0] =  0.0000000000000000e-00; w[0] = 2.0000000000000000e+00;
      break;}
    case 2:{
      x[0] = -5.7735026918962573e-01; w[0] = 1.0000000000000000e+00;
      x[1] =  5.7735026918962573e-01; w[1] = 1.0000000000000000e+00;
      break;}
    case 3:{
      x[0] = -7.7459666924148340e-01; w[0] = 5.5555555555555558e-01;
      x[1] =  0.0000000000000000e+00; w[1] = 8.8888888888888884e-01;
      x[2] =  7.7459666924148340e-01; w[2] = 5.5555555555555558e-01;
      break;}
    case 4:{
      x[0] = -8.6113631159405257e-01; w[0] = 3.4785484513745391e-01;
      x[1] = -3.3998104358485626e-01; w[1] = 6.5214515486254621e-01;
      x[2] =  3.3998104358485626e-01; w[2] = 6.5214515486254621e-01;
      x[3] =  8.6113631159405257e-01; w[3] = 3.4785484513745391e-01;
      break;}
    case 5:{
      x[0] = -9.0617984593866396e-01; w[0] = 2.3692688505618875e-01;
      x[1] = -5.3846931010568311e-01; w[1] = 4.7862867049936658e-01;
      x[2] =  0.0000000000000000e+00; w[2] = 5.6888888888888889e-01;
      x[3] =  5.3846931010568311e-01; w[3] = 4.7862867049936658e-01;
      x[4] =  9.0617984593866396e-01; w[4] = 2.3692688505618875e-01;
      break;}
    case 6:{
      x[0] = -9.3246951420315205e-01; w[0] = 1.7132449237917075e-01;
      x[1] = -6.6120938646626448e-01; w[1] = 3.6076157304813844e-01;
      x[2] = -2.3861918608319690e-01; w[2] = 4.6791393457269104e-01;
      x[3] =  2.3861918608319690e-01; w[3] = 4.6791393457269104e-01;
      x[4] =  6.6120938646626448e-01; w[4] = 3.6076157304813844e-01;
      x[5] =  9.3246951420315205e-01; w[5] = 1.7132449237917075e-01;
      break;}
    case 7:{
      x[0] = -9.4910791234275849e-01; w[0] = 1.2948496616886901e-01;
      x[1] = -7.4153118559939446e-01; w[1] = 2.7970539148927681e-01;
      x[2] = -4.0584515137739718e-01; w[2] = 3.8183005050511898e-01;
      x[3] =  0.0000000000000000e+00; w[3] = 4.1795918367346940e-01;
      x[4] =  4.0584515137739718e-01; w[4] = 3.8183005050511898e-01;
      x[5] =  7.4153118559939446e-01; w[5] = 2.7970539148927681e-01;
      x[6] =  9.4910791234275849e-01; w[6] = 1.2948496616886901e-01;
      break;}
    case 8:{
      x[0] = -9.6028985649753629e-01; w[0] = 1.0122853629037738e-01;
      x[1] = -7.9666647741362673e-01; w[1] = 2.2238103445337434e-01;
      x[2] = -5.2553240991632899e-01; w[2] = 3.1370664587788727e-01;
      x[3] = -1.8343464249564981e-01; w[3] = 3.6268378337836199e-01;
      x[4] =  1.8343464249564981e-01; w[4] = 3.6268378337836199e-01;
      x[5] =  5.2553240991632899e-01; w[5] = 3.1370664587788727e-01;
      x[6] =  7.9666647741362673e-01; w[6] = 2.2238103445337434e-01;
      x[7] =  9.6028985649753629e-01; w[7] = 1.0122853629037738e-01;
      break;}
    case 9:{
      x[0] = -9.6816023950762609e-01; w[0] = 8.1274388361574357e-02;
      x[1] = -8.3603110732663577e-01; w[1] = 1.8064816069485715e-01;
      x[2] = -6.1337143270059036e-01; w[2] = 2.6061069640293527e-01;
      x[3] = -3.2425342340380892e-01; w[3] = 3.1234707704000275e-01;
      x[4] =  0.0000000000000000e+00; w[4] = 3.3023935500125978e-01;
      x[5] =  3.2425342340380892e-01; w[5] = 3.1234707704000275e-01;
      x[6] =  6.1337143270059036e-01; w[6] = 2.6061069640293527e-01;
      x[7] =  8.3603110732663577e-01; w[7] = 1.8064816069485715e-01;
      x[8] =  9.6816023950762609e-01; w[8] = 8.1274388361574357e-02;
      break;}
    case 10:{
      x[0] = -9.7390652851717174e-01; w[0] = 6.6671344308688665e-02;
      x[1] = -8.6506336668898454e-01; w[1] = 1.4945134915058086e-01;
      x[2] = -6.7940956829902444e-01; w[2] = 2.1908636251598221e-01;
      x[3] = -4.3339539412924721e-01; w[3] = 2.6926671930999641e-01;
      x[4] = -1.4887433898163122e-01; w[4] = 2.9552422471475287e-01;
      x[5] =  1.4887433898163122e-01; w[5] = 2.9552422471475287e-01;
      x[6] =  4.3339539412924721e-01; w[6] = 2.6926671930999641e-01;
      x[7] =  6.7940956829902444e-01; w[7] = 2.1908636251598221e-01;
      x[8] =  8.6506336668898454e-01; w[8] = 1.4945134915058086e-01;
      x[9] =  9.7390652851717174e-01; w[9] = 6.6671344308688665e-02;
      break;}
    default:{
      throw invalid_argument("Quadrature number out of range"); 
    }
  }
}


// **************************************************************************//
// GaussRadauPoint
// **************************************************************************//
inline void GaussRadauPoint(const int& K, double* x, double* w){

  // DESCRIPTION
  // ----------------------
  // Return the (left) Gauss-Radau quadrature abscissa, x, and weights, w.


  // INPUTS
  // ----------------------
  // K       - Number of quadrature points


  // OUTPUTS
  // ----------------------
  // x       - (left) Gauss-Radau abscissa
  // w       - (left) Gauss-Radau weights

  
  // GAUSS-RADAU POINTS
  // ----------------------
  switch (K){
    case 2:{
      x[0] = -1.0000000000000000e+00; w[0] = 5.0000000000000000e-01;
      x[1] =  3.3333333333333331e-01; w[1] = 1.5000000000000000e+00;
      break;}
    case 3:{
      x[0] = -1.0000000000000000e+00; w[0] = 2.2222222222222221e-01;
      x[1] = -2.8989794855663564e-01; w[1] = 1.0249716523768435e+00;
      x[2] =  6.8989794855663567e-01; w[2] = 7.5280612540093372e-01;
      break;}
    case 4:{
      x[0] = -1.0000000000000000e+00; w[0] = 1.2500000000000000e-01;
      x[1] = -5.7531892352169411e-01; w[1] = 6.5768863996011950e-01;
      x[2] =  1.8106627111853058e-01; w[2] = 7.7638693768634381e-01;
      x[3] =  8.2282408097459214e-01; w[3] = 4.4092442235353591e-01;
      break;}
    case 5:{
      x[0] = -1.0000000000000000e+00; w[0] = 8.0000000000000002e-02;
      x[1] = -7.2048027131243886e-01; w[1] = 4.4620780216714140e-01;
      x[2] = -1.6718086473783364e-01; w[2] = 6.2365304595148252e-01;
      x[3] =  4.4631397272375234e-01; w[3] = 5.6271203029892414e-01;
      x[4] =  8.8579160777096466e-01; w[4] = 2.8742712158245115e-01;
      break;}
    case 6:{
      x[0] = -1.0000000000000000e+00; w[0] = 5.5555555555555552e-02;
      x[1] = -8.0292982840234717e-01; w[1] = 3.1964075322051100e-01;
      x[2] = -3.9092854670727217e-01; w[2] = 4.8538718846896983e-01;
      x[3] =  1.2405037950522771e-01; w[3] = 5.2092678318957497e-01;
      x[4] =  6.0397316425278369e-01; w[4] = 4.1690133431190729e-01;
      x[5] =  9.2038028589706256e-01; w[5] = 2.0158838525347952e-01;
      break;}
    case 7:{
      x[0] = -1.0000000000000000e+00; w[0] = 4.0816326530612242e-02;
      x[1] = -8.5389134263948219e-01; w[1] = 2.3922748922531231e-01;
      x[2] = -5.3846772406010901e-01; w[2] = 3.8094987364423116e-01;
      x[3] = -1.1734303754310027e-01; w[3] = 4.4710982901456647e-01;
      x[4] =  3.2603061943769140e-01; w[4] = 4.2470377900595557e-01;
      x[5] =  7.0384280066303140e-01; w[5] = 3.1820423146730176e-01;
      x[6] =  9.4136714568043023e-01; w[6] = 1.4898847111202015e-01;
      break;}
    case 8:{
      x[0] = -1.0000000000000000e+00; w[0] = 3.1250000000000000e-02;
      x[1] = -8.8747487892615573e-01; w[1] = 1.8535815480297932e-01;
      x[2] = -6.3951861652621522e-01; w[2] = 3.0413062064678498e-01;
      x[3] = -2.9475056577366071e-01; w[3] = 3.7651754538911847e-01;
      x[4] =  9.4307252661110771e-02; w[4] = 3.9157216745249357e-01;
      x[5] =  4.6842035443082108e-01; w[5] = 3.4701479563450105e-01;
      x[6] =  7.7064189367819158e-01; w[6] = 2.4964790132986414e-01;
      x[7] =  9.5504122712257500e-01; w[7] = 1.1450881474425743e-01;
      break;}
    case 9:{
      x[0] = -1.0000000000000000e+00; w[0] = 2.4691358024691357e-02;
      x[1] = -9.1073208942006034e-01; w[1] = 1.4765401904631545e-01;
      x[2] = -7.1126748591570887e-01; w[2] = 2.4718937820459311e-01;
      x[3] = -4.2635048571113898e-01; w[3] = 3.1684377567043809e-01;
      x[4] = -9.0373369606853299e-02; w[4] = 3.4827300277296663e-01;
      x[5] =  2.5613567083345540e-01; w[5] = 3.3769396697592952e-01;
      x[6] =  5.7138304120873851e-01; w[6] = 2.8638669635723085e-01;
      x[7] =  8.1735278420041213e-01; w[7] = 2.0055329802455107e-01;
      x[8] =  9.6444016970527313e-01; w[8] = 9.0714504923281217e-02;
      break;}
    case 10:{
      x[0] = -1.0000000000000000e+00; w[0] = 2.0000000000000000e-02;
      x[1] = -9.2748437423358110e-01; w[1] = 1.2029667055748167e-01;
      x[2] = -7.6384204242000264e-01; w[2] = 2.0427013187900075e-01;
      x[3] = -5.2564603037007918e-01; w[3] = 2.6819483784117848e-01;
      x[4] = -2.3623446939058804e-01; w[4] = 3.0585928772442256e-01;
      x[5] =  7.6059197837978126e-02; w[5] = 3.1358245722693839e-01;
      x[6] =  3.8066484014472435e-01; w[6] = 2.9061016483291846e-01;
      x[7] =  6.4776668767400947e-01; w[7] = 2.3919343171437926e-01;
      x[8] =  8.5122522058160788e-01; w[8] = 1.6437601273692223e-01;
      x[9] =  9.7117518070224695e-01; w[9] = 7.3617005486755746e-02;
      break;}
    default:{
      throw invalid_argument("Quadrature number out of range"); 
    }
  }
}


// **************************************************************************//
// GaussLobattoPoint
// **************************************************************************//
inline void GaussLobattoPoint(const int& K, double* x, double* w){

  // DESCRIPTION
  // ----------------------
  // Return the Gauss-Lobatto quadrature abscissa, x, and weights, w.


  // INPUTS
  // ----------------------
  // K       - Number of quadrature points


  // OUTPUTS
  // ----------------------
  // x       - Gauss-Lobatto abscissa
  // w       - Gauss-Lobatto weights

  
  // GAUSS-LOBATTO POINTS
  // ----------------------
  switch (K){
    case 2:{
      x[0] = -1.0000000000000000e-00; w[0] = 1.0000000000000000e+00;
      x[1] =  1.0000000000000000e-00; w[1] = 1.0000000000000000e+00;
      break;}
    case 3:{
      x[0] = -1.0000000000000000e+00; w[0] = 3.3333333333333331e-01;
      x[1] =  0.0000000000000000e+00; w[1] = 1.3333333333333333e+00;
      x[2] =  1.0000000000000000e+00; w[2] = 3.3333333333333331e-01;
      break;}
    case 4:{
      x[0] = -1.0000000000000000e+00; w[0] = 1.6666666666666666e-01;
      x[1] = -4.4721359549995793e-01; w[1] = 8.3333333333333337e-01;
      x[2] =  4.4721359549995793e-01; w[2] = 8.3333333333333337e-01;
      x[3] =  1.0000000000000000e+00; w[3] = 1.6666666666666666e-01;
      break;}
    case 5:{
      x[0] = -1.0000000000000000e+00; w[0] = 1.0000000000000001e-01;
      x[1] = -6.5465367070797720e-01; w[1] = 5.4444444444444440e-01;
      x[2] =  0.0000000000000000e+00; w[2] = 7.1111111111111114e-01;
      x[3] =  6.5465367070797720e-01; w[3] = 5.4444444444444440e-01;
      x[4] =  1.0000000000000000e+00; w[4] = 1.0000000000000001e-01;
      break;}
    case 6:{
      x[0] = -1.0000000000000000e+00; w[0] = 6.6666666666666666e-02;
      x[1] = -7.6505532392946474e-01; w[1] = 3.7847495629784700e-01;
      x[2] = -2.8523151648064510e-01; w[2] = 5.5485837703548635e-01;
      x[3] =  2.8523151648064510e-01; w[3] = 5.5485837703548635e-01;
      x[4] =  7.6505532392946474e-01; w[4] = 3.7847495629784700e-01;
      x[5] =  1.0000000000000000e+00; w[5] = 6.6666666666666666e-02;
      break;}
    case 7:{
      x[0] = -1.0000000000000000e+00; w[0] = 4.7619047619047616e-02;
      x[1] = -8.3022389627856696e-01; w[1] = 2.7682604736156596e-01;
      x[2] = -4.6884879347071423e-01; w[2] = 4.3174538120986261e-01;
      x[3] =  0.0000000000000000e+00; w[3] = 4.8761904761904762e-01;
      x[4] =  4.6884879347071423e-01; w[4] = 4.3174538120986261e-01;
      x[5] =  8.3022389627856696e-01; w[5] = 2.7682604736156596e-01;
      x[6] =  1.0000000000000000e+00; w[6] = 4.7619047619047616e-02;
      break;}
    case 8:{
      x[0] = -1.0000000000000000e+00; w[0] = 3.5714285714285712e-02;
      x[1] = -8.7174014850960657e-01; w[1] = 2.1070422714350603e-01;
      x[2] = -5.9170018143314229e-01; w[2] = 3.4112269248350435e-01;
      x[3] = -2.0929921790247888e-01; w[3] = 4.1245879465870389e-01;
      x[4] =  2.0929921790247888e-01; w[4] = 4.1245879465870389e-01;
      x[5] =  5.9170018143314229e-01; w[5] = 3.4112269248350435e-01;
      x[6] =  8.7174014850960657e-01; w[6] = 2.1070422714350603e-01;
      x[7] =  1.0000000000000000e+00; w[7] = 3.5714285714285712e-02;
      break;}
    case 9:{
      x[0] = -1.0000000000000000e+00; w[0] = 2.7777777777777776e-02;
      x[1] = -8.9975799541146018e-01; w[1] = 1.6549536156080552e-01;
      x[2] = -6.7718627951073773e-01; w[2] = 2.7453871250016171e-01;
      x[3] = -3.6311746382617816e-01; w[3] = 3.4642851097304633e-01;
      x[4] =  0.0000000000000000e+00; w[4] = 3.7151927437641724e-01;
      x[5] =  3.6311746382617816e-01; w[5] = 3.4642851097304633e-01;
      x[6] =  6.7718627951073773e-01; w[6] = 2.7453871250016171e-01;
      x[7] =  8.9975799541146018e-01; w[7] = 1.6549536156080552e-01;
      x[8] =  1.0000000000000000e+00; w[8] = 2.7777777777777776e-02;
      break;}
    case 10:{
      x[0] = -1.0000000000000000e+00; w[0] = 2.2222222222222223e-02;
      x[1] = -9.1953390816645886e-01; w[1] = 1.3330599085107012e-01;
      x[2] = -7.3877386510550502e-01; w[2] = 2.2488934206312644e-01;
      x[3] = -4.7792494981044448e-01; w[3] = 2.9204268367968378e-01;
      x[4] = -1.6527895766638703e-01; w[4] = 3.2753976118389744e-01;
      x[5] =  1.6527895766638703e-01; w[5] = 3.2753976118389744e-01;
      x[6] =  4.7792494981044448e-01; w[6] = 2.9204268367968378e-01;
      x[7] =  7.3877386510550502e-01; w[7] = 2.2488934206312644e-01;
      x[8] =  9.1953390816645886e-01; w[8] = 1.3330599085107012e-01;
      x[9] =  1.0000000000000000e+00; w[9] = 2.2222222222222223e-02;
      break;}
    default:{
      throw invalid_argument("Quadrature number out of range"); 
    }
  }
}


// **************************************************************************//
// GaussChebyshevPoint
// **************************************************************************//
inline void GaussChebyshevPoint(const int& K, double* x, double* w){

  // DESCRIPTION
  // ----------------------
  // Return the Gauss-Chebyshev quadrature abscissa, x, and weights, w.


  // INPUTS
  // ----------------------
  // K       - Number of quadrature points


  // OUTPUTS
  // ----------------------
  // x       - Gauss-Chebyshev abscissa
  // w       - Gauss-Chebyshev weights

  
  // GAUSS-CHEBYSHEV POINTS
  // ----------------------
  switch (K){
    case 2:{
      x[0] = -7.0710678118654757e-01; w[0] = 1.5707963267948966e+00;
      x[1] =  7.0710678118654757e-01; w[1] = 1.5707963267948966e+00;
      break;}
    case 3:{
      x[0] = -8.6602540378443860e-01; w[0] = 1.0471975511965976e+00;
      x[1] =  0.0000000000000000e+00; w[1] = 1.0471975511965976e+00;
      x[2] =  8.6602540378443860e-01; w[2] = 1.0471975511965976e+00;
      break;}
    case 4:{
      x[0] = -9.2387953251128674e-01; w[0] = 7.8539816339744828e-01;
      x[1] = -3.8268343236508978e-01; w[1] = 7.8539816339744828e-01;
      x[2] =  3.8268343236508978e-01; w[2] = 7.8539816339744828e-01;
      x[3] =  9.2387953251128674e-01; w[3] = 7.8539816339744828e-01;
      break;}
    case 5:{
      x[0] = -9.5105651629515353e-01; w[0] = 6.2831853071795862e-01;
      x[1] = -5.8778525229247314e-01; w[1] = 6.2831853071795862e-01;
      x[2] =  0.0000000000000000e+00; w[2] = 6.2831853071795862e-01;
      x[3] =  5.8778525229247314e-01; w[3] = 6.2831853071795862e-01;
      x[4] =  9.5105651629515353e-01; w[4] = 6.2831853071795862e-01;
      break;}
    case 6:{
      x[0] = -9.6592582628906831e-01; w[0] = 5.2359877559829882e-01;
      x[1] = -7.0710678118654757e-01; w[1] = 5.2359877559829882e-01;
      x[2] = -2.5881904510252074e-01; w[2] = 5.2359877559829882e-01;
      x[3] =  2.5881904510252074e-01; w[3] = 5.2359877559829882e-01;
      x[4] =  7.0710678118654757e-01; w[4] = 5.2359877559829882e-01;
      x[5] =  9.6592582628906831e-01; w[5] = 5.2359877559829882e-01;
      break;}
    case 7:{
      x[0] = -9.7492791218182362e-01; w[0] = 4.4879895051282759e-01;
      x[1] = -7.8183148246802980e-01; w[1] = 4.4879895051282759e-01;
      x[2] = -4.3388373911755812e-01; w[2] = 4.4879895051282759e-01;
      x[3] =  0.0000000000000000e+00; w[3] = 4.4879895051282759e-01;
      x[4] =  4.3388373911755812e-01; w[4] = 4.4879895051282759e-01;
      x[5] =  7.8183148246802980e-01; w[5] = 4.4879895051282759e-01;
      x[6] =  9.7492791218182362e-01; w[6] = 4.4879895051282759e-01;
      break;}
    case 8:{
      x[0] = -9.8078528040323043e-01; w[0] = 3.9269908169872414e-01;
      x[1] = -8.3146961230254524e-01; w[1] = 3.9269908169872414e-01;
      x[2] = -5.5557023301960218e-01; w[2] = 3.9269908169872414e-01;
      x[3] = -1.9509032201612828e-01; w[3] = 3.9269908169872414e-01;
      x[4] =  1.9509032201612828e-01; w[4] = 3.9269908169872414e-01;
      x[5] =  5.5557023301960218e-01; w[5] = 3.9269908169872414e-01;
      x[6] =  8.3146961230254524e-01; w[6] = 3.9269908169872414e-01;
      x[7] =  9.8078528040323043e-01; w[7] = 3.9269908169872414e-01;
      break;}
    case 9:{
      x[0] = -9.8480775301220802e-01; w[0] = 3.4906585039886590e-01;
      x[1] = -8.6602540378443860e-01; w[1] = 3.4906585039886590e-01;
      x[2] = -6.4278760968653936e-01; w[2] = 3.4906585039886590e-01;
      x[3] = -3.4202014332566871e-01; w[3] = 3.4906585039886590e-01;
      x[4] =  0.0000000000000000e+00; w[4] = 3.4906585039886590e-01;
      x[5] =  3.4202014332566871e-01; w[5] = 3.4906585039886590e-01;
      x[6] =  6.4278760968653936e-01; w[6] = 3.4906585039886590e-01;
      x[7] =  8.6602540378443860e-01; w[7] = 3.4906585039886590e-01;
      x[8] =  9.8480775301220802e-01; w[8] = 3.4906585039886590e-01;
      break;}
    case 10:{
      x[0] = -9.8768834059513777e-01; w[0] = 3.1415926535897931e-01;
      x[1] = -8.9100652418836790e-01; w[1] = 3.1415926535897931e-01;
      x[2] = -7.0710678118654757e-01; w[2] = 3.1415926535897931e-01;
      x[3] = -4.5399049973954680e-01; w[3] = 3.1415926535897931e-01;
      x[4] = -1.5643446504023087e-01; w[4] = 3.1415926535897931e-01;
      x[5] =  1.5643446504023087e-01; w[5] = 3.1415926535897931e-01;
      x[6] =  4.5399049973954680e-01; w[6] = 3.1415926535897931e-01;
      x[7] =  7.0710678118654757e-01; w[7] = 3.1415926535897931e-01;
      x[8] =  8.9100652418836790e-01; w[8] = 3.1415926535897931e-01;
      x[9] =  9.8768834059513777e-01; w[9] = 3.1415926535897931e-01;
      break;}
    default:{
      throw invalid_argument("Quadrature number out of range"); 
    }
  }
}


// **************************************************************************//
// GaussHermittePoint
// **************************************************************************//
inline void GaussHermittePoint(const int& K, double* x, double* w){

  // DESCRIPTION
  // ----------------------
  // Return the Gauss-Hermitte quadrature abscissa, x, and weights, w.


  // INPUTS
  // ----------------------
  // K       - Number of quadrature points


  // OUTPUTS
  // ----------------------
  // x       - Gauss-Hermitte abscissa
  // w       - Gauss-Hermitte weights

  
  // GAUSS-HERMITTE POINTS
  // ----------------------
  switch (K){
    case 2:{
      x[0] = -7.0710678118654757e-01; w[0] = 8.8622692545275794e-01;
      x[1] =  7.0710678118654757e-01; w[1] = 8.8622692545275794e-01;
      break;}
    case 3:{
      x[0] = -1.2247448713915889e+00; w[0] = 2.9540897515091935e-01;
      x[1] =  0.0000000000000000e+00; w[1] = 1.1816359006036774e+00;
      x[2] =  1.2247448713915889e+00; w[2] = 2.9540897515091935e-01;
      break;}
    case 4:{
      x[0] = -1.6506801238857844e+00; w[0] = 8.1312835447245241e-02;
      x[1] = -5.2464762327529035e-01; w[1] = 8.0491409000551273e-01;
      x[2] =  5.2464762327529035e-01; w[2] = 8.0491409000551273e-01;
      x[3] =  1.6506801238857844e+00; w[3] = 8.1312835447245241e-02;
      break;}
    case 5:{
      x[0] = -2.0201828704560856e+00; w[0] = 1.9953242059045920e-02;
      x[1] = -9.5857246461381851e-01; w[1] = 3.9361932315224113e-01;
      x[2] =  0.0000000000000000e+00; w[2] = 9.4530872048294179e-01;
      x[3] =  9.5857246461381851e-01; w[3] = 3.9361932315224113e-01;
      x[4] =  2.0201828704560856e+00; w[4] = 1.9953242059045920e-02;
      break;}
    case 6:{
      x[0] = -2.3506049736744923e+00; w[0] = 4.5300099055088430e-03;
      x[1] = -1.3358490740136970e+00; w[1] = 1.5706732032285661e-01;
      x[2] = -4.3607741192761651e-01; w[2] = 7.2462959522439252e-01;
      x[3] =  4.3607741192761651e-01; w[3] = 7.2462959522439252e-01;
      x[4] =  1.3358490740136970e+00; w[4] = 1.5706732032285661e-01;
      x[5] =  2.3506049736744923e+00; w[5] = 4.5300099055088430e-03;
      break;}
    case 7:{
      x[0] = -2.6519613568352334e+00; w[0] = 9.7178124509952034e-04;
      x[1] = -1.6735516287674714e+00; w[1] = 5.4515582819127037e-02;
      x[2] = -8.1628788285896470e-01; w[2] = 4.2560725261012777e-01;
      x[3] =  0.0000000000000000e+00; w[3] = 8.1026461755680734e-01;
      x[4] =  8.1628788285896470e-01; w[4] = 4.2560725261012777e-01;
      x[5] =  1.6735516287674714e+00; w[5] = 5.4515582819127037e-02;
      x[6] =  2.6519613568352334e+00; w[6] = 9.7178124509952034e-04;
      break;}
    case 8:{
      x[0] = -2.9306374202572441e+00; w[0] = 1.9960407221136754e-04;
      x[1] = -1.9816567566958430e+00; w[1] = 1.7077983007413471e-02;
      x[2] = -1.1571937124467802e+00; w[2] = 2.0780232581489191e-01;
      x[3] = -3.8118699020732211e-01; w[3] = 6.6114701255824126e-01;
      x[4] =  3.8118699020732211e-01; w[4] = 6.6114701255824126e-01;
      x[5] =  1.1571937124467802e+00; w[5] = 2.0780232581489191e-01;
      x[6] =  1.9816567566958430e+00; w[6] = 1.7077983007413471e-02;
      x[7] =  2.9306374202572441e+00; w[7] = 1.9960407221136754e-04;
      break;}
    case 9:{
      x[0] = -3.1909932017815277e+00; w[0] = 3.9606977263264344e-05;
      x[1] = -2.2665805845318432e+00; w[1] = 4.9436242755369437e-03;
      x[2] = -1.4685532892166679e+00; w[2] = 8.8474527394376556e-02;
      x[3] = -7.2355101875283756e-01; w[3] = 4.3265155900255575e-01;
      x[4] =  0.0000000000000000e+00; w[4] = 7.2023521560605086e-01;
      x[5] =  7.2355101875283756e-01; w[5] = 4.3265155900255575e-01;
      x[6] =  1.4685532892166679e+00; w[6] = 8.8474527394376556e-02;
      x[7] =  2.2665805845318432e+00; w[7] = 4.9436242755369437e-03;
      x[8] =  3.1909932017815277e+00; w[8] = 3.9606977263264344e-05;
      break;}
    case 10:{
      x[0] = -3.4361591188377374e+00; w[0] = 7.6404328552326410e-06;
      x[1] = -2.5327316742327897e+00; w[1] = 1.3436457467812342e-03;
      x[2] = -1.7566836492998819e+00; w[2] = 3.3874394455481037e-02;
      x[3] = -1.0366108297895136e+00; w[3] = 2.4013861108231471e-01;
      x[4] = -3.4290132722370459e-01; w[4] = 6.1086263373532568e-01;
      x[5] =  3.4290132722370459e-01; w[5] = 6.1086263373532568e-01;
      x[6] =  1.0366108297895136e+00; w[6] = 2.4013861108231471e-01;
      x[7] =  1.7566836492998819e+00; w[7] = 3.3874394455481037e-02;
      x[8] =  2.5327316742327897e+00; w[8] = 1.3436457467812342e-03;
      x[9] =  3.4361591188377374e+00; w[9] = 7.6404328552326410e-06;
      break;}
    default:{
      throw invalid_argument("Quadrature number out of range"); 
    }
  }
}


// **************************************************************************//
// GaussLaguerrePoint
// **************************************************************************//
inline void GaussLaguerrePoint(const int& K, double* x, double* w){

  // DESCRIPTION
  // ----------------------
  // Return the Gauss-Laguerre quadrature abscissa, x, and weights, w.


  // INPUTS
  // ----------------------
  // K       - Number of quadrature points


  // OUTPUTS
  // ----------------------
  // x       - Gauss-Laguerre abscissa
  // w       - Gauss-Laguerre weights

  
  // GAUSS-LAGUERRE POINTS
  // ----------------------
  switch (K){
    case 2:{
      x[0] = 5.8578643762690497e-01; w[0] = 8.5355339059327362e-01;
      x[1] = 3.4142135623730949e+00; w[1] = 1.4644660940672627e-01;
      break;}
    case 3:{
      x[0] = 4.1577455678347908e-01; w[0] = 7.1109300992917313e-01;
      x[1] = 2.2942803602790418e+00; w[1] = 2.7851773356924076e-01;
      x[2] = 6.2899450829374794e+00; w[2] = 1.0389256501586133e-02;
      break;}
    case 4:{
      x[0] = 3.2254768961939229e-01; w[0] = 6.0315410434163408e-01;
      x[1] = 1.7457611011583465e+00; w[1] = 3.5741869243779983e-01;
      x[2] = 4.5366202969211278e+00; w[2] = 3.8887908515005398e-02;
      x[3] = 9.3950709123011329e+00; w[3] = 5.3929470556132763e-04;
      break;}
    case 5:{
      x[0] = 2.6356031971814092e-01; w[0] = 5.2175561058280839e-01;
      x[1] = 1.4134030591065168e+00; w[1] = 3.9866681108317603e-01;
      x[2] = 3.5964257710407219e+00; w[2] = 7.5942449681707630e-02;
      x[3] = 7.0858100058588374e+00; w[3] = 3.6117586799220493e-03;
      x[4] = 1.2640800844275782e+01; w[4] = 2.3369972385776238e-05;
      break;}
    case 6:{
      x[0] = 2.2284660417926069e-01; w[0] = 4.5896467394996349e-01;
      x[1] = 1.1889321016726231e+00; w[1] = 4.1700083077212075e-01;
      x[2] = 2.9927363260593141e+00; w[2] = 1.1337338207404499e-01;
      x[3] = 5.7751435691045101e+00; w[3] = 1.0399197453149085e-02;
      x[4] = 9.8374674183825892e+00; w[4] = 2.6101720281493233e-04;
      x[5] = 1.5982873980601703e+01; w[5] = 8.9854790642962060e-07;
      break;}
    case 7:{
      x[0] = 1.9304367656036242e-01; w[0] = 4.0931895170127369e-01;
      x[1] = 1.0266648953391919e+00; w[1] = 4.2183127786171998e-01;
      x[2] = 2.5678767449507460e+00; w[2] = 1.4712634865750543e-01;
      x[3] = 4.9003530845264844e+00; w[3] = 2.0633514468716949e-02;
      x[4] = 8.1821534445628608e+00; w[4] = 1.0740101432807456e-03;
      x[5] = 1.2734180291797815e+01; w[5] = 1.5865464348564186e-05;
      x[6] = 1.9395727862262540e+01; w[6] = 3.1703154789955823e-08;
      break;}
    case 8:{
      x[0] = 1.7027963230510099e-01; w[0] = 3.6918858934163806e-01;
      x[1] = 9.0370177679937991e-01; w[1] = 4.1878678081434301e-01;
      x[2] = 2.2510866298661307e+00; w[2] = 1.7579498663717175e-01;
      x[3] = 4.2667001702876588e+00; w[3] = 3.3343492261215649e-02;
      x[4] = 7.0459054023934655e+00; w[4] = 2.7945362352256738e-03;
      x[5] = 1.0758516010180996e+01; w[5] = 9.0765087733582053e-05;
      x[6] = 1.5740678641278004e+01; w[6] = 8.4857467162725366e-07;
      x[7] = 2.2863131736889265e+01; w[7] = 1.0480011748715093e-09;
      break;}
    case 9:{
      x[0] = 1.5232222773180826e-01; w[0] = 3.3612642179796209e-01;
      x[1] = 8.0722002274225579e-01; w[1] = 4.1121398042398494e-01;
      x[2] = 2.0051351556193473e+00; w[2] = 1.9928752537088523e-01;
      x[3] = 3.7834739733312328e+00; w[3] = 4.7460562765651644e-02;
      x[4] = 6.2049567778766130e+00; w[4] = 5.5996266107945754e-03;
      x[5] = 9.3729852516875756e+00; w[5] = 3.0524976709321095e-04;
      x[6] = 1.3466236911092093e+01; w[6] = 6.5921230260753591e-06;
      x[7] = 1.8833597788991696e+01; w[7] = 4.1107693303495503e-08;
      x[8] = 2.6374071890927375e+01; w[8] = 3.2908740303507109e-11;
      break;}
    case 10:{
      x[0] = 1.3779347054049243e-01; w[0] = 3.0844111576502015e-01;
      x[1] = 7.2945454950317046e-01; w[1] = 4.0111992915527400e-01;
      x[2] = 1.8083429017403161e+00; w[2] = 2.1806828761180930e-01;
      x[3] = 3.4014336978548996e+00; w[3] = 6.2087456098677725e-02;
      x[4] = 5.5524961400638038e+00; w[4] = 9.5015169751810954e-03;
      x[5] = 8.3301527467644974e+00; w[5] = 7.5300838858753747e-04;
      x[6] = 1.1843785837900066e+01; w[6] = 2.8259233495995625e-05;
      x[7] = 1.6279257831378104e+01; w[7] = 4.2493139849626779e-07;
      x[8] = 2.1996585811980761e+01; w[8] = 1.8395648239796317e-09;
      x[9] = 2.9920697012273891e+01; w[9] = 9.9118272196090125e-13;
      break;}
    default:{
      throw invalid_argument("Quadrature number out of range"); 
    }
  }
}
#endif
